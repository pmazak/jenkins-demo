import org.apache.commons.httpclient.HttpClient
import org.apache.commons.httpclient.methods.PostMethod
import org.apache.commons.httpclient.methods.StringRequestEntity

apply plugin: 'jetty'    
buildDir = "build/demo"
defaultTasks 'jenkins'

ciPlugins = [ 'git', 'groovy-postbuild', 'promoted-builds', 'email-ext', 'template-project', 'build-pipeline-plugin', 'text-finder' ]

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'commons-httpclient:commons-httpclient:3.1'
    }
}

repositories {
    mavenCentral()
}
dependencies {
    testCompile 'junit:junit:4.8.2'
}

task jenkins (description: 'Runs jetty server with Jenkins CI.') << {
    ant.get(src: "http://mirrors.jenkins-ci.org/war/latest/jenkins.war", dest: ".", verbose: true, skipexisting: true)
    project.buildDir = "build/8080"
    clean.execute()
    jettyRunWar {
        System.setProperty("JENKINS_HOME", JENKINS_HOME)
        webApp = new File("jenkins.war")
        contextPath = "/"
        doFirst {
            println JETTY_MESSAGE
        }
    }
    jettyRunWar.execute()
}

task installPlugins (description: 'Installs Jenkins plugins in the demo.') << {
    ciPlugins.each {
        println " :$it"
        ant.get(src: "http://mirrors.jenkins-ci.org/plugins/${it}/latest/${it}.hpi", dest: "$JENKINS_HOME/plugins/${it}.hpi", verbose: true, skipexisting: true)
    }
}

task createJob (description: 'Creates demo-CI job. Requires Jenkins server to be running.') << {
    def jobName = "demo-CI"
    HttpClient httpClient = new HttpClient();
    def postMethod = new PostMethod("$LOCAL_URL/createItem?name=$jobName")
    def gitRepo = new File("").toURI().toString().replace("file:/", "").replace("%20", " ")
    def config = new File("config/DemoCI.JobConfig.txt").text
    config = config.replace("[[REPLACEME]]", "\"$gitRepo\"")
    postMethod.requestEntity = new StringRequestEntity(config, "application/xml", "UTF-8")
    def responseCode = httpClient.executeMethod(postMethod)
    println "Creating $jobName job ... [$responseCode]"
}

task commitabunch (description: 'Makes a trail of commits to show changes between CI builds.') << {
    def rand = new Random()
    def strs = RANDOM_COMMENT_WORDS.split(' ')
    def randCommits = rand.nextInt(6)+1
    def commitFile = "config/.commitabunch"
    new File(commitFile).delete()
    (0..randCommits).each {
       def randNum = rand.nextInt(21)+1
       def randStr = ""
       (0..10).each {
           randStr += " " + strs[rand.nextInt(strs.length)]
       }
       def comment = "QC-$randNum:$randStr"
       println comment
       new File(commitFile) << "// $comment\n"
       ant.exec(command:"git commit -am '$comment'")
    }
}

JENKINS_HOME = "config/.jenkins"
LOCAL_URL = "http://localhost:8080"
JETTY_MESSAGE = """
Server is coming up...
    Browse to: $LOCAL_URL/
  (Control-C to stop)
"""
RANDOM_COMMENT_WORDS = "fixed a bug with the media content not wanting to shape the circle properly like the square was shaped working on unit test for class that seemed difficult"