import org.apache.commons.httpclient.HttpClient
import org.apache.commons.httpclient.methods.PostMethod
import org.apache.commons.httpclient.methods.StringRequestEntity

apply plugin: 'jetty'    
port = 8080
buildDir = "build/demo"

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'commons-httpclient:commons-httpclient:3.1'
    }
}

repositories {
    add(new org.apache.ivy.plugins.resolver.URLResolver()) {
        name = 'absoluteUrl'
        addArtifactPattern('http://[organization]/[artifact]')
    }		
}
configurations {
    ci
}
dependencies {
    ci "mirrors.jenkins-ci.org/war/latest:jenkins.war"
    testCompile 'junit:junit:4.8.2'
}
    
task jenkins << {
    port = System.properties['port'] ? Integer.parseInt(System.properties['port']) : port
    project.buildDir = "build/$port"
    def ciName = "jenkins"
    def ciWar = configurations.ci.asPath.replaceAll("\\\\", "/")
    clean.execute()
    jettyRunWar {
        httpPort = port
        System.setProperty("JENKINS_HOME", "config/.$ciName")
        contextPath = "/"
        webApp = new File(ciWar)
        doFirst {
            println JETTY_MESSAGE
        }
    }
    jettyRunWar.execute()
}

task createJob << {
        def jobName = "demo-CI"
        HttpClient httpClient = new HttpClient();
        def postMethod = new PostMethod("$LOCAL_URL/createItem?name=$jobName")
        def gitRepo = new File("").toURI().toString().replace("file:/", "")
        def config = new File("config/DemoCI.JobConfig.txt").text
        config = config.replace("[[REPLACEME]]", gitRepo)
        postMethod.requestEntity = new StringRequestEntity(config, "application/xml", "UTF-8")
        def responseCode = httpClient.executeMethod(postMethod)
        println "Creating $jobName job ... [$responseCode]"
/*
download git.hpi
make gradle jenkins just give you git, the CI job and the QA job if not want it, don't use demo
    */
}

task commitabunch << {
    def rand = new Random()
    def str = "fixed a bug with the media content not wanting to shape the circle properly like the square was shaped working on unit test for class that seemed difficult"
    def strs = str.split(' ')
    def randCommits = rand.nextInt(21)+1
    new File("config/.commitabunch").delete()
    (0..randCommits).each {
       def randNum = rand.nextInt(101)+1
       def randStr = ""
       (0..10).each {
           randStr += " " + strs[rand.nextInt(strs.length)]
       }
       def comment = "QC-$randNum:$randStr"
       new File("commitabunch.txt") << "// $comment\n"
       ant.exec(command:"git commit -am '$comment'")
    }
}

LOCAL_URL = "http://localhost:8080"
JETTY_MESSAGE = """
Server is coming up...
    Browse to: $LOCAL_URL/
  (Control-C to stop)
"""