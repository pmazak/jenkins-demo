import org.apache.commons.httpclient.HttpClient
import org.apache.commons.httpclient.methods.PostMethod
import org.apache.commons.httpclient.methods.StringRequestEntity

apply plugin: 'jetty'    
buildDir = "build/demo"
defaultTasks 'jenkins'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'commons-httpclient:commons-httpclient:3.1'
    }
}

repositories {
    mavenCentral()
    add(new org.apache.ivy.plugins.resolver.URLResolver()) {
        name = 'absoluteUrl'
        addArtifactPattern('http://[organization]/[artifact]')
    }
}
configurations {
    ci
}
dependencies {
    ci "mirrors.jenkins-ci.org/war/latest:jenkins.war"
    def pluginsUrl = "hudson-ci.org/downloads/plugins"
    ci "$pluginsUrl/git/1.1.4:git.hpi"
    ci "$pluginsUrl/groovy-postbuild/1.3:groovy-postbuild.hpi"
    ci "$pluginsUrl/promoted-builds/1.10:promoted-builds.hpi"
    ci "$pluginsUrl/email-ext/2.10:email-ext.hpi" 
    ci "$pluginsUrl/template-project/1.2:template-project.hpi"
    ci "$pluginsUrl/build-pipeline-plugin/1.0.0:build-pipeline-plugin.hpi"
    testCompile 'junit:junit:4.8.2'
}

def ciFiles = []
configurations.ci.each {
    ciFiles << it    
}

task jenkins (description: 'Runs jetty server with Jenkins CI.') << {
    project.buildDir = "build/8080"
    clean.execute()
    jettyRunWar {
        System.setProperty("JENKINS_HOME", JENKINS_HOME)
        webApp = ciFiles[0]
        contextPath = "/"
        doFirst {
            println JETTY_MESSAGE
        }
    }
    jettyRunWar.execute()
}

task plugins (description: 'Installs Jenkins plugins in the demo.') << {
    def pluginNames = ["git", "groovy-postbuild", "promoted-builds", "email-ext", "template-project", "build-pipeline-plugin"]
    def downloadId = 1
    pluginNames.each {
        ant.copy(file: ciFiles[downloadId], tofile: "$JENKINS_HOME/plugins/${it}.hpi", verbose: true)
        downloadId++
    }
}

task createJob (description: 'Creates demo-CI job. Requires Jenkins server to be running.') << {
    def jobName = "demo-CI"
    HttpClient httpClient = new HttpClient();
    def postMethod = new PostMethod("$LOCAL_URL/createItem?name=$jobName")
    def gitRepo = new File("").toURI().toString().replace("file:/", "")
    def config = new File("config/DemoCI.JobConfig.txt").text
    config = config.replace("[[REPLACEME]]", gitRepo)
    postMethod.requestEntity = new StringRequestEntity(config, "application/xml", "UTF-8")
    def responseCode = httpClient.executeMethod(postMethod)
    println "Creating $jobName job ... [$responseCode]"
}

task commitabunch (description: 'Makes a trail of commits to show changes between CI builds.') << {
    def rand = new Random()
    def strs = RANDOM_COMMENT_WORDS.split(' ')
    def randCommits = rand.nextInt(21)+1
    def commitFile = "config/.commitabunch"
    new File(commitFile).delete()
    (0..randCommits).each {
       def randNum = rand.nextInt(101)+1
       def randStr = ""
       (0..10).each {
           randStr += " " + strs[rand.nextInt(strs.length)]
       }
       def comment = "QC-$randNum:$randStr"
       println comment
       new File(commitFile) << "// $comment\n"
       ant.exec(command:"git commit -am '$comment'")
    }
}

JENKINS_HOME = "config/.jenkins"
LOCAL_URL = "http://localhost:8080"
JETTY_MESSAGE = """
Server is coming up...
    Browse to: $LOCAL_URL/
  (Control-C to stop)
"""
RANDOM_COMMENT_WORDS = "fixed a bug with the media content not wanting to shape the circle properly like the square was shaped working on unit test for class that seemed difficult"