def HUDSON_VERSION = 1.398
def JENKINS_VERSION = 1.399

apply plugin: 'jetty'    
defaultTasks "opts"
port = 8080
buildDir = "build/demo"

task opts << {
    println """Usage: gradle [hudson|jenkins]-[basic|intermediate|expert]
 Examples: 
          gradle hudson-basic
          gradle jenkins-intermediate
"""
}
task "hudson-basic" << {
    configJetty("http://java.net/downloads/hudson/war/hudson-${HUDSON_VERSION}.war",
        "hudson-${HUDSON_VERSION}.war", "hudson-basic")
    jettyRunWar.execute()
}
task "jenkins-basic" << {
    port = System.properties['port'] ? Integer.parseInt(System.properties['port']) : port
    project.buildDir = "build/$port"
    def ciName = "jenkins"
    if (JENKINS_VERSION < 1.396) {
        ciName = "hudson"
    }
    configJetty("http://mirrors.jenkins-ci.org/war/${JENKINS_VERSION}/${ciName}.war",
        "jenkins-${JENKINS_VERSION}.war", "jenkins-basic")
    jettyRunWar.execute()
}
def configJetty(downloadUrl, fileName, ciName) {
    clean.execute()
    ant.get(src:downloadUrl, dest:".gradle/$fileName", skipexisting:true, verbose:true)
    jettyRunWar {
        httpPort = port
        System.setProperty("HUDSON_HOME", "config/.$ciName")
        contextPath = ciName
        webApp = new File(".gradle/$fileName")
        doFirst {
            println """
Server is up!
    Browse to: http://localhost:$port/$contextPath
  (Control-C to stop)
"""
        }
    }
}
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'commons-httpclient:commons-httpclient:3.1'
    }
}
    dependencies {
        testCompile 'junit:junit:4.8.2'
    }

import org.apache.commons.httpclient.HttpClient
import org.apache.commons.httpclient.methods.PostMethod
import org.apache.commons.httpclient.methods.StringRequestEntity

task createDemoJob << {
        def jobName = "demo7-CI"
        HttpClient httpClient = new HttpClient();
        def postMethod = new PostMethod("http://localhost:8080/jenkins-basic/createItem?name=$jobName")
        def gitRepo = new File("").toURI().toString().replace("file:/", "")
        def config = new File("config/DemoCI.JobConfig.txt").text
        config = config.replace("[[REPLACEME]]", gitRepo)
        postMethod.requestEntity = new StringRequestEntity(config, "application/xml", "UTF-8")
        def responseCode = httpClient.executeMethod(postMethod)
        println "Creating $jobName job ... [$responseCode]"
    /*
        add(new org.apache.ivy.plugins.resolver.URLResolver()) {
			name = 'absoluteUrlPathAndJarName'
            addArtifactPattern('http://[organization]/[artifact]')
        }		
    configurations {
	huds
}
dependencies {
	huds "$hudsonUrl/jnlpJars:hudson-cli.jar"
}
task huds << {
	def jar = configurations.huds.asPath.replaceAll("\\\\", "/")
}
download git.hpi
make gradle jenkins just give you git, the CI job and the QA job if not want it, don't use demo
    */
}
task commitabunch << {
    def rand = new Random()
    def str = "fixed a bug with the media content not wanting to shape the circle properly like the square was shaped working on unit test for class that seemed difficult"
    def strs = str.split(' ')
    def randCommits = rand.nextInt(21)+1
    new File("config/.commitabunch").delete()
    (0..randCommits).each {
       def randNum = rand.nextInt(101)+1
       def randStr = ""
       (0..10).each {
           randStr += " " + strs[rand.nextInt(strs.length)]
       }
       def comment = "QC-$randNum:$randStr"
       new File("commitabunch.txt") << "// $comment\n"
       ant.exec(command:"git commit -am '$comment'")
    }
}